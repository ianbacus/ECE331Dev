/*
 * queue
 *
 *  Created on: Mar 6, 2016
 *      Author: Ian Bacus (ianbacus@gmail.com)
 */

#ifndef __CONSTANTS__
#define __CONSTANTS__
#include <stdint.h> //int definitions
#include <stdbool.h>
#include <stdlib.h> //calloc, free
#include <stdint.h>

#ifdef TIVA
#include <sysctl.h>
#include <gpio.h>
#include <ssi.h>
#include <interrupt.h>
#include <hw_types.h>
#include <hw_memmap.h>
#include <hw_ints.h>
#include <pin_map.h>
#endif
#define FIFO_SIZE	8
#define FRAME_TYPE	uint16_t
#define FRAME_SIZE	sizeof(FRAME_TYPE)
#define FRAME_BITS	8*FRAME_SIZE
#define DELAY 10000000
#define IDLE_PAD 10

#define arrayLen(x)	sizeof(x)/sizeof(x[0])
typedef uint8_t engine_t;
typedef enum
{
	Reset,Idle,Preamble, LocoA, LocoB, TurnA, TurnB
} TX_state_t;

#ifndef ZEROPACKETS
//addresses 2 and 3
static const char Engine_strings[2][16][28] =
{
	{
		"0000000110010000000010000111","0000000110010100110010100001","0000000110010101010010101101","0000000110010101110010101001",
		"0000000110010110010010110101","0000000110010110110010110001","0000000110010111010010111101","0000000110010111110010111001",
		"0000000110011000000011000111","0000000110011100110011100001","0000000110011101010011101101","0000000110011101110011101001",
		"0000000110011110010011110101","0000000110011110110011110001","0000000110011111010011111101","0000000110011111110011111001",
	},
	{
		"0000000110010000000010000111","0000000110010100110010100001","0000000110010101010010101101","0000000110010101110010101001",
		"0000000110010110010010110101","0000000110010110110010110001","0000000110010111010010111101","0000000110010111110010111001",
		"0000000110011000000011000111","0000000110011100110011100001","0000000110011101010011101101","0000000110011101110011101001",
		"0000000110011110010011110101","0000000110011110110011110001","0000000110011111010011111101","0000000110011111110011111001",
	},
};
#else
//Broadcast address: 0
static const char Engine_strings[2][16][28] =
{
	{
		"0000000000010000000010000001","0000000000010100110010100111","0000000000010101010010101011","0000000000010101110010101111",
		"0000000000010110010010110011","0000000000010110110010110111","0000000000010111010010111011","0000000000010111110010111111",
		"0000000000010000000010000001","0000000000011100110011100111","0000000000011101010011101011","0000000000011101110011101111",
		"0000000000011110010011110011","0000000000011110110011110111","0000000000011111010011111011","0000000000011111110011111111",
	},
	{
		"0000000000010000000010000001","0000000000010100110010100111","0000000000010101010010101011","0000000000010101110010101111",
		"0000000000010110010010110011","0000000000010110110010110111","0000000000010111010010111011","0000000000010111110010111111",
		"0000000000010000000010000001","0000000000011100110011100111","0000000000011101010011101011","0000000000011101110011101111",
		"0000000000011110010011110011","0000000000011110110011110111","0000000000011111010011111011","0000000000011111110011111111",
	},
};
#endif


FRAME_TYPE Engine[2][16][7] =
{
	{
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
	},
	{
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},
	}
};

static const char Turnout_strings[2][2][28] =
{
	{"0000010010100001000100011011","0000010010100000000100010011"},{"0000010010100001010100011001","0000010010100001110100011101"}
};
FRAME_TYPE Turnout[2][2][7] =
{
	{{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},}
};




FRAME_TYPE Preamb[2] = {0x5555,0x5555};

static const char IdlePacket_string[28] = "0111111110000000000111111111";
FRAME_TYPE IdlePacket[7] = {0,0,0,0,0,0,0};

static const char ResetPacket_string[28] = "0000000000000000000000000001";
FRAME_TYPE ResetPacket[8] = {0,0,0,0,0,0,0,0};

//#define REPROGRAM FactoryReset
#ifdef REPROGRAM
/*Configuration variables can be set using the instruction format
 * ...{preamble} 0 {address} 0 {1110CCVV 0 VVVVVVVV 0 DDDDDDDD} 0 {error xor} 1
 * CC: 11 to write byte, 01 to verify (request)
 * V{10}: The bit code for the configuration variable (1 through 1024)
 * D{8}: Value to write to the CV, or in the verified byte the value currently set
 *
 * Error(xor) = address ^ instrByte0 ^ instrByte1 ^ instrByte2
 *
 *
 * This packet must be sent twice (and after a period of 5ms) to correctly write to the CV register
 *
 * The reset CV for a Bachmann (lenz) decoder: CV8=33, brand can be determined by reading CV8. ID=99 indicates Lenz
 *
 * Packets listed below contain preambles to simplify transmission, since space is not a concern
*/


//CC=11, V=8, D=33: {preamble}0{broadcast address}0{1110.1100}0{0000.1000}0{0010.0001}0{11000101}
static const char FactoryReset_string[59] = 	"11111111111111000000000011101100000001000000100001011000101";
FRAME_TYPE FactoryReset[21] = 		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

//CC=11, V=1, D=2: {preamble}0{broadcast address}0{1110.1100}0{0000.0001}0{0000.0010}0{11101111}
static const char ProgramAddress2_string[59] = 		"11111111111111000000000011101100000000001000000010011101111";
FRAME_TYPE ProgramAddress2[21] = 		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

//CC=11, V=1, D=4: {preamble}0{broadcast address}0{1110.1100}0{0000.0001}0{0000.0100}0{11101001}
static const char ProgramAddress4_string[59] = 		"11111111111111000000000011101100000000001000000100011101001";
FRAME_TYPE ProgramAddress4[21] = 		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


#endif


#ifdef CONSIST

//Consist control tests: deactivation packets

//addr [0] 0: 0 00000000 0 00010011 0 00000000 0 00010011 1
//addr [1] 2: 0 00000010 0 00010011 0 00000000 0 00010001 1
//addr [2] 3: 0 00000011 0 00010011 0 00000000 0 00010000 1
//addr [3] 4: 0 00000100 0 00010011 0 00000000 0 00010111 1

static const char Consist_strings[4][37] =
{
		"0000000000000100110000000000000100111",
		"0000000100000100110000000000000100011",
		"0000000110000100110000000000000100001",
		"0000001000000100110000000000000101111"
};


FRAME_TYPE ConsistPacket[4][7] =
{
	{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}
};
#endif

#endif


